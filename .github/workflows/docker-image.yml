name: Build, Push and Deploy AI Service

on:
  push:
    branches: [ master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Docker Hub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Generate Docker Metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: davidnguyen7603/coolchatai
          tags: |
            type=sha,format=short
            type=semver,pattern={{version}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and Push Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: ${{ github.event_name != 'pull_request' && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
          IMAGE_NAME: davidnguyen7603/coolchatai
        run: |
          # Determine which tag to deploy: semver tag on git-tag, otherwise "latest"
          if [[ "${GITHUB_REF}" =~ ^refs/tags/v([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
            DEPLOY_TAG="${BASH_REMATCH[1]}"
          elif [[ "${GITHUB_REF}" == "refs/heads/master" ]]; then
            DEPLOY_TAG="latest"
          else
            echo "‚ùå Unexpected ref ${GITHUB_REF}"
            exit 1
          fi

          echo "üëâ Deploying image ${IMAGE_NAME}:${DEPLOY_TAG}"
          # Wait until Docker Hub has that tag
          until docker pull "${IMAGE_NAME}:${DEPLOY_TAG}" >/dev/null 2>&1; do
            echo "  ...waiting for ${IMAGE_NAME}:${DEPLOY_TAG} to appear on Docker Hub"
            sleep 5
          done

          # Trigger Render deploy
          HTTP_STATUS=$(curl -s -o response.txt -w "%{http_code}" \
            -X POST "https://api.render.com/v1/services/${RENDER_SERVICE_ID}/deploys" \
            -H "Authorization: Bearer ${RENDER_API_KEY}" \
            -H "Content-Type: application/json" \
            -d '{"imageRef": "${IMAGE_NAME}:${DEPLOY_TAG}", "clearCache": "clear" }')

          if [ "${HTTP_STATUS}" -ne 201 ]; then
            echo "‚ùå Deploy failed with status ${HTTP_STATUS}"
            echo "--- response body ---"
            cat response.txt
            exit 1
          fi

          echo "‚úÖ Deploy triggered for ${IMAGE_NAME}:${DEPLOY_TAG}"
        